import os
import json
import pandas as pd
from datetime import datetime

# Paths
LOG_FILE = "results/train_log.csv"
KNOWLEDGE_FILE = "memory/knowledge_base.json"
REPORT_DIR = "reports"
os.makedirs(REPORT_DIR, exist_ok=True)


def load_top_signals(frame, symbol, top_n=3):
    if not os.path.exists(KNOWLEDGE_FILE):
        return []
    try:
        kb = json.load(open(KNOWLEDGE_FILE, encoding="utf-8"))
        stats = kb.get(f"{symbol}_{frame}", {}).get("signal_stats", {})
        top = sorted(stats.items(), key=lambda x: x[1].get("win_rate", 0), reverse=True)
        return [(k, v["win_rate"]) for k, v in top[:top_n]]
    except:
        return []


def extract_drawdown():
    log_file = "results/recovery_logs/recovery_signals.csv"
    if os.path.exists(log_file):
        df = pd.read_csv(log_file)
        if 'max_drawdown' in df.columns:
            return df['max_drawdown'].max()
    return None


def generate_summary():
    if not os.path.exists(LOG_FILE):
        print("[❌] train_log.csv not found.")
        return

    df = pd.read_csv(LOG_FILE)
    if df.empty:
        print("[❌] Log file is empty.")
        return

    last = df.iloc[-1]
    frame = last['frame']
    reward = last['reward']
    steps = last['steps']
    session = last['session']
    filename = last['file']
    timestamp = last.get('timestamp', datetime.now().strftime("%Y-%m-%d %H:%M"))

    top_signals = load_top_signals(frame, symbol="BTC")
    drawdown = extract_drawdown()

    report = f"""# 📊 RL Training Summary – Session {session}

**File:** `{filename}`  
**Frame:** `{frame}`  
**Steps:** `{steps}`  
**Total Reward:** `{reward:.2f}`  
**Date:** `{timestamp}`

---

## ✅ Highlights

- Reward Curve saved: `reward_curve_{frame}.png`
- Last model: `agents/{frame}/deep_rl.zip`

"""

    if top_signals:
        report += "### 🚀 Top Performing Signals\n"
        for sig, win in top_signals:
            report += f"- `{sig}` ({win*100:.1f}% win rate)\n"
        report += "\n"

    if drawdown is not None:
        report += f"**Max Drawdown:** `{drawdown:.2f}%`\n"

    report += f"\n---\n\n> 📁 Auto-generated by `generate_markdown_report.py`\n> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"

    out_path = os.path.join(REPORT_DIR, f"rl_summary_{datetime.now().strftime('%Y%m%d')}.md")
    with open(out_path, "w", encoding="utf-8") as f:
        f.write(report)

    print(f"[✅] Report saved to {out_path}")


if __name__ == "__main__":
    generate_summary()
