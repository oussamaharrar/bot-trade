diff --git a/rl_builders.py b/rl_builders.py 
index 0000000..1111111 100644
*** a/rl_builders.py
--- b/rl_builders.py
@@
-from stable_baselines3.common.vec_env import SubprocVecEnv
+from stable_baselines3.common.vec_env import SubprocVecEnv, DummyVecEnv
 from .env_trading import TradingEnv
@@
-def make_subproc_envs(env_fns, start_method="spawn", normalize=True):
-    wrapped = [lambda fn=fn: fn() for fn in env_fns]
-    vec = SubprocVecEnv(wrapped, start_method=start_method)
-    if normalize:
-        from stable_baselines3.common.vec_env import VecNormalize
-        vec = VecNormalize(vec, norm_obs=True, norm_reward=True, clip_obs=10.0)
-    return vec
+def make_vec_env(env_fns, n_envs: int, start_method="spawn", normalize=True):
+    """يرجع DummyVecEnv عند n_envs=1، وإلا SubprocVecEnv."""
+    wrapped = [lambda fn=fn: fn() for fn in env_fns]
+    if n_envs == 1:
+        vec = DummyVecEnv(wrapped)
+    else:
+        vec = SubprocVecEnv(wrapped, start_method=start_method)
+    if normalize:
+        from stable_baselines3.common.vec_env import VecNormalize
+        vec = VecNormalize(vec, norm_obs=True, norm_reward=True, clip_obs=10.0)
+    return vec
@@
-def build_env_fns(df, frame, symbol, n_envs, use_indicators=True, config=None, writers=None):
+def build_env_fns(df, frame, symbol, n_envs, use_indicators=True, config=None):
     env_fns = []
     for i in range(n_envs):
         def _init(df=df):
-            return TradingEnv(data=df, frame=frame, symbol=symbol, use_indicators=use_indicators, config=config, writers=writers)
+            # مهم: لا نمرّر writers للعمال لتفادي مشاكل Windows pipes
+            return TradingEnv(data=df, frame=frame, symbol=symbol, use_indicators=use_indicators, config=config, writers=None)
         env_fns.append(_init)
     return env_fns
